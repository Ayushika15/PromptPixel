
// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview Image generation flow.
 *
 * - generateImage - A function that takes a text prompt and an image style and generates an image.
 * - GenerateImageInput - The input type for the generateImage function.
 * - GenerateImageOutput - The return type for the generateImage function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateImageInputSchema = z.object({
  prompt: z.string().describe('The prompt to use to generate the image.'),
  style: z
    .enum(['Realistic', 'Anime', 'Cyberpunk', 'Fantasy', 'Ghibli'])
    .describe('The style of the image.'),
});
export type GenerateImageInput = z.infer<typeof GenerateImageInputSchema>;

const GenerateImageOutputSchema = z.object({
  imageUrl: z.string().optional().describe('The generated image as a data URI.'),
  error: z.string().optional().describe('An error message if image generation failed.'),
});
export type GenerateImageOutput = z.infer<typeof GenerateImageOutputSchema>;

export async function generateImage(
  input: GenerateImageInput
): Promise<GenerateImageOutput> {
  return generateImageFlow(input);
}

// This prompt object is defined but not directly used by the generateImageFlow below,
// as the flow calls ai.generate directly.
// The prompt logic is incorporated into the ai.generate call.
const generateImagePrompt = ai.definePrompt({
  name: 'generateImagePrompt',
  input: {schema: GenerateImageInputSchema},
  output: {schema: GenerateImageOutputSchema}, // Note: This schema might need adjustment if prompt was used directly
  prompt: `Generate an image in the style of {{{style}}} based on the following prompt: {{{prompt}}}.`,
});

const generateImageFlow = ai.defineFlow(
  {
    name: 'generateImageFlow',
    inputSchema: GenerateImageInputSchema,
    outputSchema: GenerateImageOutputSchema,
  },
  async (input): Promise<GenerateImageOutput> => {
    try {
      const {media} = await ai.generate({
        model: 'googleai/gemini-2.0-flash-exp', 
        prompt: `Generate an image in the style of ${input.style} based on the following prompt: ${input.prompt}.`,
        config: {responseModalities: ['TEXT', 'IMAGE']},
      });

      if (!media || !media.url) {
        console.warn('Image generation returned no media URL. Prompt:', input.prompt, 'Style:', input.style);
        return { error: 'Image generation failed. This might be due to safety filters or an issue with the generated content. Try a different prompt or style.' };
      }

      return {imageUrl: media.url};
    } catch (flowError: any) {
      console.error('Critical error in generateImageFlow. Input:', input, 'Error:', flowError);
      // Log the full error server-side for Vercel logs
      // Return a user-friendly error to the client
      let userMessage = 'An unexpected error occurred during image generation. Please try again later.';
      if (flowError.message && flowError.message.includes('API key')) {
        userMessage = 'Image generation service is not configured correctly. Administrator check server logs.';
      }
      // Add more specific error message mapping here if Genkit provides identifiable error types/codes for common issues like quota.
      return { error: userMessage };
    }
  }
);

